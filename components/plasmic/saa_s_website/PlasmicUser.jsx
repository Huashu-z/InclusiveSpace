// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uftrV6ZeR5SuVi5gnDLzFk
// Component: If1fqS83W9Lw
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import CtaBlock from "../../CtaBlock"; // plasmic-import: rAg7mntU2p-Z/component
import Header from "../../Header"; // plasmic-import: fDzUbLUclsbT/component
import Checkbox from "../../Checkbox"; // plasmic-import: 9vVSXaKyPA3c/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: uftrV6ZeR5SuVi5gnDLzFk/projectcss
import sty from "./PlasmicUser.module.css"; // plasmic-import: If1fqS83W9Lw/css
import ArrowSvgIcon from "./icons/PlasmicIcon__ArrowSvg"; // plasmic-import: ZrG95_rSrl_o/icon

createPlasmicElementProxy;

export const PlasmicUser__VariantProps = new Array(
  "sidebarOpen",
  "sidebarClose"
);

export const PlasmicUser__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUser__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sidebarOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sidebarOpen
      },
      {
        path: "sidebarClose",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sidebarClose
      },
      {
        path: "checkboxIntersection.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxTactilePav.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxLights.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxPoi.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxNoise.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxTree.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedLayers",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootsidebarClose]: hasVariant(
                $state,
                "sidebarClose",
                "sidebarClose"
              ),
              [sty.rootsidebarOpen]: hasVariant(
                $state,
                "sidebarOpen",
                "sidebarOpen"
              )
            }
          )}
        >
          <CtaBlock
            data-plasmic-name={"ctaBlock"}
            data-plasmic-override={overrides.ctaBlock}
            className={classNames("__wab_instance", sty.ctaBlock)}
          />

          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"mapBox"}
            data-plasmic-override={overrides.mapBox}
            className={classNames(projectcss.all, sty.mapBox, {
              [sty.mapBoxsidebarOpen]: hasVariant(
                $state,
                "sidebarOpen",
                "sidebarOpen"
              )
            })}
            id={"map"}
          />

          <div
            data-plasmic-name={"sideBarBox"}
            data-plasmic-override={overrides.sideBarBox}
            className={classNames(projectcss.all, sty.sideBarBox, {
              [sty.sideBarBoxsidebarClose]: hasVariant(
                $state,
                "sidebarClose",
                "sidebarClose"
              ),
              [sty.sideBarBoxsidebarOpen]: hasVariant(
                $state,
                "sidebarOpen",
                "sidebarOpen"
              )
            })}
          >
            <ArrowSvgIcon
              className={classNames(projectcss.all, sty.svg__lhwYj, {
                [sty.svgsidebarClose__lhwYj3FoUt]: hasVariant(
                  $state,
                  "sidebarClose",
                  "sidebarClose"
                ),
                [sty.svgsidebarOpen__lhwYJyaBs4]: hasVariant(
                  $state,
                  "sidebarOpen",
                  "sidebarOpen"
                )
              })}
              onClick={async event => {
                const $steps = {};
                $steps["updateSidebarClose"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "sidebarClose",
                        operation: 2
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSidebarClose"] != null &&
                  typeof $steps["updateSidebarClose"] === "object" &&
                  typeof $steps["updateSidebarClose"].then === "function"
                ) {
                  $steps["updateSidebarClose"] = await $steps[
                    "updateSidebarClose"
                  ];
                }
              }}
              role={"img"}
            />

            <ArrowSvgIcon
              className={classNames(projectcss.all, sty.svg___9Ata1, {
                [sty.svgsidebarOpen___9Ata1YaBs4]: hasVariant(
                  $state,
                  "sidebarOpen",
                  "sidebarOpen"
                )
              })}
              onClick={async event => {
                const $steps = {};
                $steps["updateSidebarClose"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "sidebarClose",
                        operation: 2
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSidebarClose"] != null &&
                  typeof $steps["updateSidebarClose"] === "object" &&
                  typeof $steps["updateSidebarClose"].then === "function"
                ) {
                  $steps["updateSidebarClose"] = await $steps[
                    "updateSidebarClose"
                  ];
                }
              }}
              role={"img"}
            />

            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox, {
                [sty.freeBoxsidebarOpen]: hasVariant(
                  $state,
                  "sidebarOpen",
                  "sidebarOpen"
                )
              })}
            >
              <Checkbox
                data-plasmic-name={"checkboxIntersection"}
                data-plasmic-override={overrides.checkboxIntersection}
                className={classNames(
                  "__wab_instance",
                  sty.checkboxIntersection,
                  {
                    [sty.checkboxIntersectionsidebarOpen]: hasVariant(
                      $state,
                      "sidebarOpen",
                      "sidebarOpen"
                    )
                  }
                )}
                label={"Intersection Density"}
                onChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "checkboxIntersection",
                    "isSelected"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                  (async val => {
                    const $steps = {};
                    $steps["select"] =
                      $state.checkboxIntersection.isSelected === true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: [
                                ...($state.selectedLayers || []),
                                "intersection_density"
                              ]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["select"] != null &&
                      typeof $steps["select"] === "object" &&
                      typeof $steps["select"].then === "function"
                    ) {
                      $steps["select"] = await $steps["select"];
                    }
                    $steps["unselect"] =
                      $state.checkboxIntersection.isSelected === false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: ($state.selectedLayers || []).filter(
                                layer => layer !== "intersection_density"
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["unselect"] != null &&
                      typeof $steps["unselect"] === "object" &&
                      typeof $steps["unselect"].then === "function"
                    ) {
                      $steps["unselect"] = await $steps["unselect"];
                    }
                  }).apply(null, eventArgs);
                }}
              />

              <Checkbox
                data-plasmic-name={"checkboxTactilePav"}
                data-plasmic-override={overrides.checkboxTactilePav}
                className={classNames("__wab_instance", sty.checkboxTactilePav)}
                label={"Tactile Pavement"}
                onChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "checkboxTactilePav",
                    "isSelected"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                  (async val => {
                    const $steps = {};
                    $steps["select"] =
                      $state.checkboxTactilePav.isSelected === true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: [
                                ...($state.selectedLayers || []),
                                "tactile_pavement"
                              ]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["select"] != null &&
                      typeof $steps["select"] === "object" &&
                      typeof $steps["select"].then === "function"
                    ) {
                      $steps["select"] = await $steps["select"];
                    }
                    $steps["unselect"] =
                      $state.checkboxTactilePav.isSelected === false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: ($state.selectedLayers || []).filter(
                                layer => layer !== "tactile_pavement"
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["unselect"] != null &&
                      typeof $steps["unselect"] === "object" &&
                      typeof $steps["unselect"].then === "function"
                    ) {
                      $steps["unselect"] = await $steps["unselect"];
                    }
                  }).apply(null, eventArgs);
                }}
              />

              <Checkbox
                data-plasmic-name={"checkboxLights"}
                data-plasmic-override={overrides.checkboxLights}
                className={classNames("__wab_instance", sty.checkboxLights)}
                label={"Street Lights"}
                onChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "checkboxLights",
                    "isSelected"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                  (async val => {
                    const $steps = {};
                    $steps["select"] =
                      $state.checkboxLights.isSelected === true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: [
                                ...($state.selectedLayers || []),
                                "streetlight"
                              ]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["select"] != null &&
                      typeof $steps["select"] === "object" &&
                      typeof $steps["select"].then === "function"
                    ) {
                      $steps["select"] = await $steps["select"];
                    }
                    $steps["unselect"] =
                      $state.checkboxLights.isSelected === false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: ($state.selectedLayers || []).filter(
                                layer => layer !== "streetlight"
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["unselect"] != null &&
                      typeof $steps["unselect"] === "object" &&
                      typeof $steps["unselect"].then === "function"
                    ) {
                      $steps["unselect"] = await $steps["unselect"];
                    }
                  }).apply(null, eventArgs);
                }}
              />

              <Checkbox
                data-plasmic-name={"checkboxPoi"}
                data-plasmic-override={overrides.checkboxPoi}
                className={classNames("__wab_instance", sty.checkboxPoi, {
                  [sty.checkboxPoisidebarOpen]: hasVariant(
                    $state,
                    "sidebarOpen",
                    "sidebarOpen"
                  )
                })}
                label={"POIs"}
                onChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "checkboxPoi",
                    "isSelected"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                  (async val => {
                    const $steps = {};
                    $steps["select"] =
                      $state.checkboxPoi.isSelected === true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: [...($state.selectedLayers || []), "POIs"]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["select"] != null &&
                      typeof $steps["select"] === "object" &&
                      typeof $steps["select"].then === "function"
                    ) {
                      $steps["select"] = await $steps["select"];
                    }
                    $steps["unselect"] =
                      $state.checkboxPoi.isSelected === false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: ($state.selectedLayers || []).filter(
                                layer => layer !== "POIs"
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["unselect"] != null &&
                      typeof $steps["unselect"] === "object" &&
                      typeof $steps["unselect"].then === "function"
                    ) {
                      $steps["unselect"] = await $steps["unselect"];
                    }
                  }).apply(null, eventArgs);
                }}
              />

              <Checkbox
                data-plasmic-name={"checkboxNoise"}
                data-plasmic-override={overrides.checkboxNoise}
                className={classNames("__wab_instance", sty.checkboxNoise)}
                label={"Noise"}
                onChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "checkboxNoise",
                    "isSelected"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                  (async val => {
                    const $steps = {};
                    $steps["select"] =
                      $state.checkboxNoise.isSelected === true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: [...($state.selectedLayers || []), "noise"]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["select"] != null &&
                      typeof $steps["select"] === "object" &&
                      typeof $steps["select"].then === "function"
                    ) {
                      $steps["select"] = await $steps["select"];
                    }
                    $steps["unselect"] =
                      $state.checkboxNoise.isSelected === false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: ($state.selectedLayers || []).filter(
                                layer => layer !== "noise"
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["unselect"] != null &&
                      typeof $steps["unselect"] === "object" &&
                      typeof $steps["unselect"].then === "function"
                    ) {
                      $steps["unselect"] = await $steps["unselect"];
                    }
                  }).apply(null, eventArgs);
                }}
              />

              <Checkbox
                data-plasmic-name={"checkboxTree"}
                data-plasmic-override={overrides.checkboxTree}
                className={classNames("__wab_instance", sty.checkboxTree)}
                label={"Trees"}
                onChange={async (...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "checkboxTree",
                    "isSelected"
                  ]).apply(null, eventArgs);
                  if (
                    eventArgs.length > 1 &&
                    eventArgs[1] &&
                    eventArgs[1]._plasmic_state_init_
                  ) {
                    return;
                  }
                  (async val => {
                    const $steps = {};
                    $steps["select"] =
                      $state.checkboxTree.isSelected === true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: [...($state.selectedLayers || []), "tree"]
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["select"] != null &&
                      typeof $steps["select"] === "object" &&
                      typeof $steps["select"].then === "function"
                    ) {
                      $steps["select"] = await $steps["select"];
                    }
                    $steps["unselect"] =
                      $state.checkboxTree.isSelected === false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedLayers"]
                              },
                              operation: 0,
                              value: ($state.selectedLayers || []).filter(
                                layer => layer !== "tree"
                              )
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["unselect"] != null &&
                      typeof $steps["unselect"] === "object" &&
                      typeof $steps["unselect"].then === "function"
                    ) {
                      $steps["unselect"] = await $steps["unselect"];
                    }
                  }).apply(null, eventArgs);
                }}
              />
            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "ctaBlock",
    "header",
    "mapBox",
    "sideBarBox",
    "freeBox",
    "checkboxIntersection",
    "checkboxTactilePav",
    "checkboxLights",
    "checkboxPoi",
    "checkboxNoise",
    "checkboxTree"
  ],

  ctaBlock: ["ctaBlock"],
  header: ["header"],
  mapBox: ["mapBox"],
  sideBarBox: [
    "sideBarBox",
    "freeBox",
    "checkboxIntersection",
    "checkboxTactilePav",
    "checkboxLights",
    "checkboxPoi",
    "checkboxNoise",
    "checkboxTree"
  ],

  freeBox: [
    "freeBox",
    "checkboxIntersection",
    "checkboxTactilePav",
    "checkboxLights",
    "checkboxPoi",
    "checkboxNoise",
    "checkboxTree"
  ],

  checkboxIntersection: ["checkboxIntersection"],
  checkboxTactilePav: ["checkboxTactilePav"],
  checkboxLights: ["checkboxLights"],
  checkboxPoi: ["checkboxPoi"],
  checkboxNoise: ["checkboxNoise"],
  checkboxTree: ["checkboxTree"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUser__ArgProps,
          internalVariantPropNames: PlasmicUser__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUser__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUser";
  } else {
    func.displayName = `PlasmicUser.${nodeName}`;
  }
  return func;
}

export const PlasmicUser = Object.assign(
  // Top-level PlasmicUser renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ctaBlock: makeNodeComponent("ctaBlock"),
    header: makeNodeComponent("header"),
    mapBox: makeNodeComponent("mapBox"),
    sideBarBox: makeNodeComponent("sideBarBox"),
    freeBox: makeNodeComponent("freeBox"),
    checkboxIntersection: makeNodeComponent("checkboxIntersection"),
    checkboxTactilePav: makeNodeComponent("checkboxTactilePav"),
    checkboxLights: makeNodeComponent("checkboxLights"),
    checkboxPoi: makeNodeComponent("checkboxPoi"),
    checkboxNoise: makeNodeComponent("checkboxNoise"),
    checkboxTree: makeNodeComponent("checkboxTree"),
    // Metadata about props expected for PlasmicUser
    internalVariantProps: PlasmicUser__VariantProps,
    internalArgProps: PlasmicUser__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUser;
/* prettier-ignore-end */
