// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uftrV6ZeR5SuVi5gnDLzFk
// Component: If1fqS83W9Lw
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import CtaBlock from "../../CtaBlock"; // plasmic-import: rAg7mntU2p-Z/component
import Header from "../../Header"; // plasmic-import: fDzUbLUclsbT/component
import Checkbox from "../../Checkbox"; // plasmic-import: 9vVSXaKyPA3c/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: uftrV6ZeR5SuVi5gnDLzFk/projectcss
import sty from "./PlasmicUser.module.css"; // plasmic-import: If1fqS83W9Lw/css
import ArrowSvgIcon from "./icons/PlasmicIcon__ArrowSvg"; // plasmic-import: ZrG95_rSrl_o/icon
import dynamic from "next/dynamic";
import "leaflet/dist/leaflet.css";

const MapComponent = dynamic(() => import("../../MapComponent"), { ssr: false });

createPlasmicElementProxy;

export const PlasmicUser__VariantProps = new Array(
  "sidebarOpen",
  "sidebarClose"
);

export const PlasmicUser__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicUser__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const [selectingStart, setSelectingStart] = React.useState(false); //Controls whether the user is selecting a starting point
  const [startPoint, setStartPoint] = React.useState(null); // Stores the user-selected starting point
  const [computeAccessibility, setComputeAccessibility] = React.useState(false);
  const [walkingTime, setWalkingTime] = React.useState(15); // Default walking time is 15 minutes
  const [selectedLayers, setSelectedLayers] = React.useState([]); // load Layer

  // slidebar categorys
  const [openCategory, setOpenCategory] = React.useState(null);
  const toggleCategory = (category) => {
    setOpenCategory(openCategory === category ? null : category);
  };

  const [resetTrigger, setResetTrigger] = React.useState(false);

  const handleResetResults = () => {
    console.log("🚀 Resetting accessibility results...");
    setComputeAccessibility(false); // Ensure calculation is stopped
    setStartPoint(null); // Clear selected start point
    setResetTrigger(true);
  };

  const onResetHandled = () => {
    console.log("父组件：子组件那边重置完了");
    setResetTrigger(false);
  };

  const toggleLayer = (layer) => {
    setSelectedLayers((prev) =>
      prev.includes(layer) ? prev.filter((l) => l !== layer) : [...prev, layer]
    );
  };

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sidebarOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sidebarOpen
      },
      {
        path: "sidebarClose",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.sidebarClose
      },
      {
        path: "checkboxIntersection.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxTactilePav.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxLights.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxPoi.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxNoise.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkboxTree.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedLayers",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "selectingStart",  // Add selection mode variable
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootsidebarClose]: hasVariant(
                $state,
                "sidebarClose",
                "sidebarClose"
              ),
              [sty.rootsidebarOpen]: hasVariant(
                $state,
                "sidebarOpen",
                "sidebarOpen"
              )
            }
          )}
        >
          <CtaBlock
            data-plasmic-name={"ctaBlock"}
            data-plasmic-override={overrides.ctaBlock}
            className={classNames("__wab_instance", sty.ctaBlock)}
          />

          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"mapBox"}
            data-plasmic-override={overrides.mapBox}
            className={classNames(projectcss.all, sty.mapBox, {
              [sty.mapBoxsidebarOpen]: hasVariant(
                $state,
                "sidebarOpen",
                "sidebarOpen"
              )
            })}
            id={"map"}
          >
            <MapComponent 
              selectedLayers={selectedLayers} 
              selectingStart={selectingStart} 
              setSelectingStart={setSelectingStart}
              walkingTime={walkingTime} 
              startPoint={startPoint} // Transfer starting point
              setStartPoint={setStartPoint} // Allow MapComponent to modify the starting point
              computeAccessibility={computeAccessibility} // Trigger calculation
              setComputeAccessibility={setComputeAccessibility} // Reset after calculation
              resetTrigger={resetTrigger}
              onResetHandled={onResetHandled}
            />
          </div>

          <div
            data-plasmic-name={"sideBarBox"}
            data-plasmic-override={overrides.sideBarBox}
            className={classNames(projectcss.all, sty.sideBarBox, {
              [sty.sideBarBoxsidebarClose]: hasVariant(
                $state,
                "sidebarClose",
                "sidebarClose"
              ),
              [sty.sideBarBoxsidebarOpen]: hasVariant(
                $state,
                "sidebarOpen",
                "sidebarOpen"
              )
            })}
          >
            <ArrowSvgIcon
              className={classNames(projectcss.all, sty.svg__lhwYj, {
                [sty.svgsidebarClose__lhwYj3FoUt]: hasVariant(
                  $state,
                  "sidebarClose",
                  "sidebarClose"
                ),
                [sty.svgsidebarOpen__lhwYJyaBs4]: hasVariant(
                  $state,
                  "sidebarOpen",
                  "sidebarOpen"
                )
              })}
              onClick={async event => {
                const $steps = {};
                $steps["updateSidebarClose"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "sidebarClose",
                        operation: 2
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSidebarClose"] != null &&
                  typeof $steps["updateSidebarClose"] === "object" &&
                  typeof $steps["updateSidebarClose"].then === "function"
                ) {
                  $steps["updateSidebarClose"] = await $steps[
                    "updateSidebarClose"
                  ];
                }
              }}
              role={"img"}
            />

            <ArrowSvgIcon
              className={classNames(projectcss.all, sty.svg___9Ata1, {
                [sty.svgsidebarOpen___9Ata1YaBs4]: hasVariant(
                  $state,
                  "sidebarOpen",
                  "sidebarOpen"
                )
              })}
              onClick={async event => {
                const $steps = {};
                $steps["updateSidebarClose"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "sidebarClose",
                        operation: 2
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }
                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateSidebarClose"] != null &&
                  typeof $steps["updateSidebarClose"] === "object" &&
                  typeof $steps["updateSidebarClose"].then === "function"
                ) {
                  $steps["updateSidebarClose"] = await $steps[
                    "updateSidebarClose"
                  ];
                }
              }}
              role={"img"}
            />

            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox, {
                [sty.freeBoxsidebarOpen]: hasVariant(
                  $state,
                  "sidebarOpen",
                  "sidebarOpen"
                )
              })}
            > 

              <div className={sty["sidebar-section"]}>
                <h3 className={sty["sidebar-title"]}>User Setting</h3>
                <div className={sty["sidebar-slider"]}>
                  {/* Add a slider to select walking time */}
                  <label style={{ display: "block", marginBottom: "5px" }}>
                    Walking time（{walkingTime} minutes）:
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="60"
                    step="1"
                    value={walkingTime}
                    onChange={(e) => setWalkingTime(Number(e.target.value))}
                    className={sty["sidebar-slider"]} 
                  />
                </div>

                <div className={sty["button-container"]}>
                  {/* Add a "Select starting point" button here */}
                  <div style={{ display: "flex", justifyContent: "flex-start" }}>
                    <button 
                      onClick={() => setSelectingStart(true)}
                      className={sty["setup-button"]}
                    >
                      <img 
                        src="https://cdn-icons-png.flaticon.com/512/684/684908.png" 
                        alt="Location Icon"
                        className={sty["img"]} 
                      />
                      Select Start Point
                    </button>
                  </div>
                  {/* button for accessibility computation */}
                  <div style={{ display: "flex", gap: "10px", justifyContent: "center" }}>
                    <button
                      onClick={() => {
                        if (!startPoint) {
                          alert("Please select a starting point first!");
                          return;
                        }
                        setComputeAccessibility(true);
                      }}
                      className={sty["setup-button"]}
                    >
                      Attachment Area
                    </button>

                    <button
                      onClick={handleResetResults}
                      className={sty["setup-button"]}
                    >
                      Reset Results
                    </button>
                  </div>
                </div>
              </div>

              <div className={sty["sidebar-section"]}>
                <h3 className={sty["sidebar-title"]}>Variable</h3>
                {/* Category 1: Infrastructure */}
                <div className={sty["faq-item"]}>
                  <button className={sty["faq-question"]} onClick={() => toggleCategory("infra")}>
                    Infrastructure
                    <span className={sty["faq-icon"]}>{openCategory === "infra" ? "−" : "+"}</span>
                  </button>
                  {openCategory === "infra" && (
                    <div className={sty["faq-answer"]}>
                      <Checkbox
                        data-plasmic-name={"checkboxIntersection"}
                        data-plasmic-override={overrides.checkboxIntersection}
                        className={classNames("__wab_instance", sty.checkboxIntersection)}
                        label={"Intersection Density"}
                        onChange={(e) => toggleLayer("intersection_density")}
                      />
                      <Checkbox
                        data-plasmic-name={"checkboxTactilePav"}
                        data-plasmic-override={overrides.checkboxTactilePav}
                        className={classNames("__wab_instance", sty.checkboxTactilePav)}
                        label={"Tactile Pavement"}
                        onChange={(e) => toggleLayer("tactile_pavement")}
                      />
                    </div>
                  )}
                </div>

                {/* Category 2: Environmental Factors */}
                <div className={sty["faq-item"]}>
                  <button className={sty["faq-question"]} onClick={() => toggleCategory("env")}>
                    Environmental Factors
                    <span className={sty["faq-icon"]}>{openCategory === "env" ? "−" : "+"}</span>
                  </button>
                  {openCategory === "env" && (
                    <div className={sty["faq-answer"]}>
                      <Checkbox
                        data-plasmic-name={"checkboxLights"}
                        data-plasmic-override={overrides.checkboxLights}
                        className={classNames("__wab_instance", sty.checkboxLights)}
                        label={"Street Lights"}
                        onChange={(e) => toggleLayer("lighting")}
                      />
                      <Checkbox
                        data-plasmic-name={"checkboxNoise"}
                        data-plasmic-override={overrides.checkboxNoise}
                        className={classNames("__wab_instance", sty.checkboxNoise)}
                        label={"Noise"}
                        onChange={(e) => toggleLayer("noise")}
                      />
                    </div>
                  )}
                </div>

                {/* Category 3: Vegetation */}
                <div className={sty["faq-item"]}>
                  <button className={sty["faq-question"]} onClick={() => toggleCategory("veg")}>
                    Vegetation
                    <span className={sty["faq-icon"]}>{openCategory === "veg" ? "−" : "+"}</span>
                  </button>
                  {openCategory === "veg" && (
                    <div className={sty["faq-answer"]}>
                      <Checkbox
                        data-plasmic-name={"checkboxTree"}
                        data-plasmic-override={overrides.checkboxTree}
                        className={classNames("__wab_instance", sty.checkboxTree)}
                        label={"Trees"}
                        onChange={(e) => toggleLayer("tree")}
                      />
                    </div>
                  )}
                </div>
              </div>

              {/* Load Layers */}
              <div className={sty["sidebar-section"]}>
                <h3 className={sty["sidebar-title"]}>Map Layers</h3>
                <label>
                  <input 
                    type="checkbox" 
                    checked={selectedLayers.includes("roads")} 
                    onChange={() => toggleLayer("roads")} 
                  /> Roads
                </label>
              </div>

            </div>
          </div>
        </Stack__>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "ctaBlock",
    "header",
    "mapBox",
    "sideBarBox",
    "freeBox",
    "checkboxIntersection",
    "checkboxTactilePav",
    "checkboxLights",
    "checkboxPoi",
    "checkboxNoise",
    "checkboxTree"
  ],

  ctaBlock: ["ctaBlock"],
  header: ["header"],
  mapBox: ["mapBox"],
  sideBarBox: [
    "sideBarBox",
    "freeBox",
    "checkboxIntersection",
    "checkboxTactilePav",
    "checkboxLights",
    "checkboxPoi",
    "checkboxNoise",
    "checkboxTree"
  ],

  freeBox: [
    "freeBox",
    "checkboxIntersection",
    "checkboxTactilePav",
    "checkboxLights",
    "checkboxPoi",
    "checkboxNoise",
    "checkboxTree"
  ],

  checkboxIntersection: ["checkboxIntersection"],
  checkboxTactilePav: ["checkboxTactilePav"],
  checkboxLights: ["checkboxLights"],
  checkboxPoi: ["checkboxPoi"],
  checkboxNoise: ["checkboxNoise"],
  checkboxTree: ["checkboxTree"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicUser__ArgProps,
          internalVariantPropNames: PlasmicUser__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicUser__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUser";
  } else {
    func.displayName = `PlasmicUser.${nodeName}`;
  }
  return func;
}

export const PlasmicUser = Object.assign(
  // Top-level PlasmicUser renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ctaBlock: makeNodeComponent("ctaBlock"),
    header: makeNodeComponent("header"),
    mapBox: makeNodeComponent("mapBox"),
    sideBarBox: makeNodeComponent("sideBarBox"),
    freeBox: makeNodeComponent("freeBox"),
    checkboxIntersection: makeNodeComponent("checkboxIntersection"),
    checkboxTactilePav: makeNodeComponent("checkboxTactilePav"),
    checkboxLights: makeNodeComponent("checkboxLights"),
    checkboxPoi: makeNodeComponent("checkboxPoi"),
    checkboxNoise: makeNodeComponent("checkboxNoise"),
    checkboxTree: makeNodeComponent("checkboxTree"),
    // Metadata about props expected for PlasmicUser
    internalVariantProps: PlasmicUser__VariantProps,
    internalArgProps: PlasmicUser__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicUser;
/* prettier-ignore-end */
